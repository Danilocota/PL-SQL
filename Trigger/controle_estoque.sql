/*Exemplo de trigger para controle de estoque
Feito em 02/07/2018 por Danilo Neto
Trigger feita no Oracle Database 12c R2*/

/*Criando as tabelas para teste*/
CREATE TABLE PRODUTO(
PROD_ID INT PRIMARY KEY,
PROD_NOME VARCHAR(100),
PROD_VALOR NUMBER(8,2),
PROD_QUANT INT);

CREATE TABLE VENDA(
VEN_ID INT PRIMARY KEY,
PROD_ID INT,
VEN_QUANT INT,
CONSTRAINT PROD_ID_FK FOREIGN KEY (PROD_ID) REFERENCES PRODUTO (PROD_ID));

/*Criando duas sequências para fazer o auto incremento da primary key de cada produto e venda*/
CREATE SEQUENCE SEQ_VENDA
START WITH 1
INCREMENT BY 1;

CREATE SEQUENCE SEQ_PROD
START WITH 1
INCREMENT BY 1;

/*Criando um pacote para armazenar duas procedures que faz a inserção 
nas tabelas*/
CREATE OR REPLACE PACKAGE PKG_PRODUCAO IS
PROCEDURE SP_PROD(V_NOME IN VARCHAR, V_VALOR IN NUMBER,V_QUANT IN NUMBER);
PROCEDURE SP_VENDA(V_PROD_ID IN NUMBER, V_QUANT IN NUMBER);
END;
/
CREATE OR REPLACE PACKAGE BODY PKG_PRODUCAO IS
PROCEDURE SP_PROD (V_NOME IN VARCHAR, V_VALOR IN NUMBER,V_QUANT IN NUMBER)IS
BEGIN
INSERT INTO PRODUTO VALUES (SEQ_PROD.NEXTVAL,V_NOME,V_VALOR,V_QUANT);
END SP_PROD;
PROCEDURE SP_VENDA(V_PROD_ID IN NUMBER, V_QUANT IN NUMBER)IS
BEGIN
INSERT INTO VENDA VALUES (SEQ_VENDA.NEXTVAL,V_PROD_ID,V_QUANT);
END SP_VENDA;
END PKG_PRODUCAO;
/

/*Criando a trigger para fazer o controle de estoque na tabela produto
de acordo com a quantidade de vendas feitas na tabela venda*/
CREATE OR REPLACE TRIGGER ATT_QUANT_PROD
AFTER INSERT OR UPDATE OR DELETE ON VENDA
FOR EACH ROW
DECLARE
V1 EXCEPTION;
V2 EXCEPTION;
V_PROD PRODUTO.PROD_QUANT%TYPE;
BEGIN
IF UPDATING THEN
  SELECT PROD_QUANT INTO V_PROD FROM PRODUTO WHERE PROD_ID = :OLD.PROD_ID;
  IF V_PROD <= 0 THEN
    IF :NEW.VEN_QUANT < :OLD.VEN_QUANT THEN
      UPDATE PRODUTO SET PROD_QUANT = PROD_QUANT+(:OLD.VEN_QUANT-:NEW.VEN_QUANT) WHERE PROD_ID = :OLD.PROD_ID;
    ELSE
      RAISE V1;
    END IF;
  ELSIF V_PROD >= 0 THEN
    IF :NEW.VEN_QUANT < :OLD.VEN_QUANT THEN
      UPDATE PRODUTO SET PROD_QUANT = PROD_QUANT+(:OLD.VEN_QUANT-:NEW.VEN_QUANT) WHERE PROD_ID = :OLD.PROD_ID;
    ELSIF :NEW.VEN_QUANT > :OLD.VEN_QUANT THEN
      IF V_PROD + ABS(:NEW.VEN_QUANT-:OLD.VEN_QUANT) < 0 THEN
        RAISE V2;
      ELSE
        UPDATE PRODUTO SET PROD_QUANT = PROD_QUANT-ABS(:NEW.VEN_QUANT-:OLD.VEN_QUANT) WHERE PROD_ID = :OLD.PROD_ID;
      END IF;
    END IF;
  END IF;
ELSIF INSERTING THEN
  SELECT PROD_QUANT INTO V_PROD FROM PRODUTO WHERE PROD_ID = :NEW.PROD_ID;
  IF V_PROD <= 0 THEN
    RAISE V1;
  ELSIF V_PROD > 0 THEN
    IF V_PROD - :NEW.VEN_QUANT < 0 THEN
      RAISE V2;
    ELSIF V_PROD - :NEW.VEN_QUANT >= 0 THEN 
      UPDATE PRODUTO SET PROD_QUANT = PROD_QUANT-:NEW.VEN_QUANT WHERE PROD_ID = :NEW.PROD_ID;
    END IF;
  END IF;
ELSIF DELETING THEN
  UPDATE PRODUTO SET PROD_QUANT = PROD_QUANT + :OLD.VEN_QUANT WHERE PROD_ID = :OLD.PROD_ID;
END IF;
EXCEPTION
WHEN V1 THEN
RAISE_APPLICATION_ERROR(-20343,'Não há mais produtos no estoque!');
WHEN V2 THEN
RAISE_APPLICATION_ERROR(-20343,'A quantidade selecionada ultrapassa a quantidade atual no estoque!');
END;
/

/*Exemplo de utilização da procedure de produto*/
EXEC PKG_PRODUCAO.SP_PROD(NOME,VALOR,QUANTIDADE);

/*Exemplo de utilização da procedure de venda*/
EXEC PKG_PRODUCAO.SP_VENDA(ID_DO_PRODUTO,QUANTIDADE);

/*Depois disso é só alimentar as tabelas e observar como a trigger 
se comporta quando não existir quantidade suficiente no estoque*/


